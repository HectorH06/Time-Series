---
title: "Forecasting electricity demand"
format: html
---

```{r}
#| message: false

library(tidyverse)
library(fpp3)
library(forecast)
library(plotly)
```

```{r}
vic_elec
```

```{r}
elec <- vic_elec |> 
  index_by(Hour = ~ lubridate::floor_date(., "1 hour")) |> 
  summarise(
    Demand = sum(Demand),
    Temperature = mean(Temperature),
    Holiday = any(Holiday)
  ) |> 
  mutate(
    hora = hour(Hour)
  )
elec

elec_train <- elec |> 
  filter_index(. ~ "2014-10-31")

elec_test <- elec |> 
  filter_index("2014-11-01" ~ .)
```

```{r}
p <- elec_train |> 
  autoplot(Demand, color = "darkorange2")

ggplotly(p, dynamicTicks = TRUE) |> 
  rangeslider()
```

```{r}
p <- elec_train |> 
  autoplot(Temperature, color = "seagreen")

ggplotly(p, dynamicTicks = TRUE) |> 
  rangeslider()
```

```{r}
elec_train |> 
  ggplot(aes(x = Temperature, y = Demand)) +
  geom_point(alpha = 0.3)
```

```{r}
elec_train |> 
  ggplot(aes(x = Temperature, y = Demand, color = hora)) +
  geom_point(alpha = 0.5) +
  scale_color_viridis_c()

elec_train |> 
  ggplot(aes(x = Temperature, y = Demand, color = Holiday)) +
  geom_point(alpha = 0.5) +
  scale_color_brewer(palette = "Paired")
```

```{r}
elec_train |> 
  model(
    STL(Demand ~ season(period = "year", window = "periodic") + 
          season(period = "week", window = "periodic") +
          season(period = "day", window = "periodic")
          )
  ) |> 
  components() |> 
  autoplot()
```

```{r}
elec_fit <- elec_train |> 
  model(
    stl_reg = decomposition_model(
      STL(Demand ~ season(period = "year", window = "periodic") + 
          season(period = "week", window = "periodic") +
          season(period = "day", window = "periodic")
          ),
      TSLM(season_adjust ~ Temperature + I(Temperature^2) + Holiday),
      # SNAIVE(season_year),
      # SNAIVE(season_week),
      SNAIVE(season_day)
    )
  )

elec_fit

elec_fit |> 
  report()

elec_aug <- elec_fit |> augment()

p <- elec_aug |> 
  ggplot(aes(x = Hour)) +
  geom_line(aes(y = Demand)) +
  geom_line(aes(y = .fitted), color = "firebrick")

ggplotly(p, dynamicTicks = TRUE) |> 
  rangeslider()
```

```{r}
elec_fit |> 
  gg_tsresiduals(lag_max = 72)


elec_fit |> 
  accuracy()
```

```{r}
elec_fcst <- elec_fit |>
  forecast(elec_test)

p <- elec_fcst |> 
  autoplot(elec |> filter_index("2014-10-01" ~ .), level = NULL) #+ 
  # theme(legend.position = "top")

ggplotly(p, dynamicTicks = TRUE) |> 
  rangeslider()
```

```{r}
elec_fcst |> 
  accuracy(elec)
```

```{r}
elec_ts <- ts(elec_train$Demand, frequency = 24)

elec_test_ts <- ts(elec_test$Demand, frequency = 24, start = end(elec_ts) + c(0,1))

fourier_terms <- forecast::fourier(elec_ts, K = 3)
colnames(fourier_terms) <- paste0("F", 1:ncol(fourier_terms))

regressors <- elec_train |>
    select(Temperature, Holiday) |>
    mutate(Temp2 = Temperature^2) |>
    bind_cols(as.data.frame(fourier_terms))

fit_fourier <- tslm(elec_ts ~ Temperature + Holiday + Temp2 + F1 + F2 + F3 + F4 + F5 + F6,
                   data = regressors)

```


```{r}
variables_modelo <- names(coef(fit_fourier))[-1]
cat("Variables requeridas por el modelo:\n")
print(variables_modelo)

fourier_future <- forecast::fourier(elec_ts, K = 3, h = nrow(elec_test))

if(all(paste0("F", 1:6) %in% variables_modelo)) {
  colnames(fourier_future) <- paste0("F", 1:6)
} else {
  colnames(fourier_future) <- grep("S\\d+-\\d+|C\\d+-\\d+", variables_modelo, value = TRUE)
}

regressors_test <- data.frame(
  Temperature = elec_test$Temperature,
  Holiday = elec_test$Holiday,
  Temp2 = elec_test$Temperature^2
) |> 
  bind_cols(as.data.frame(fourier_future))

if("HolidayTRUE" %in% variables_modelo) {
  regressors_test$HolidayTRUE <- as.logical(regressors_test$Holiday)
}

variables_faltantes <- setdiff(variables_modelo, names(regressors_test))
if(length(variables_faltantes) > 0) {
  stop("Variables faltantes: ", paste(variables_faltantes, collapse = ", "))
}

fcst_fourier <- forecast(fit_fourier, newdata = regressors_test)

autoplot(fcst_fourier) +
  autolayer(elec_test_ts, series = "Real") +
  labs(title = "Pronóstico con Términos de Fourier")
```

```{r}
elec_fcst |> 
  accuracy(elec)

fcst_fourier |>
  accuracy(elec_test_ts)
```

